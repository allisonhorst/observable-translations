{
  "hash": "657960ff46b31460cd90ab63e3306f3e",
  "result": {
    "markdown": "---\ntitle: \"A comparison of data wrangling & visualization in R & JavaScript\"\nsubtitle: \"Focusing on dplyr and Arquero\"\nauthor: \"Allison Horst\"\ndate: 2022-04-22\n---\n\n## Overview\n\nThe goal of this document is to compare some basic wrangling (between `tidyverse` functions (especially in `dplyr`) in R, and `Arquero` in JavaScript) and visualization (between `ggplot2` in R, and `Plot` in JavaScript). I'm still learning about JavaScript and Observable -- this is a living document that will keep growing (and being corrected) as I learn more useful comparisons! \n\nFor those of you R users, don't fear - `Arquero` feels pretty darn familiar to `dplyr` once you get rolling. From the `Arquero` repo: \"Arquero is a JavaScript library for query processing and transformation of array-backed data tables. Following the relational algebra and inspired by the design of `dplyr`, Arquero provides a fluent API for manipulating column-oriented data frames. Arquero supports a range of data transformation tasks, including filter, sample, aggregation, window, join, and reshaping operations.\" \n\nSee all `Arquero` verbs: https://uwdata.github.io/arquero/api/verbs.html\n\n## Attaching / importing libraries:\n\n### Attaching installed R packages: \n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(here)\n```\n:::\n\n### Importing JavaScript library `Arquero`\n```{ojs}\nimport { aq, op } from '@uwdata/arquero'\n```\n\n\n\n## Comparison 1: Read in a file, take a first look! \n\n### R Tidyverse version: \n\nIn R, we can use `readr::read_csv()` (in the `tidyverse`) to read in a CSV:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r <- read_csv(\"penguins.csv\")\n```\n:::\n\nCheck out the first 10 rows:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  head(10)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 10 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# … with 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n\n### ObservableJS Arquero version: \n\nWe can read in `penguins.csv` using the `.loadCSV()` function from the [Arquero](https://observablehq.com/@uwdata/introducing-arquero) library, which I am quickly learning to love. \n\n```{ojs}\npenguins_js = aq.loadCSV(\"penguins.csv\")\n```\n\nCheck out the first 10 rows:\n\n```{ojs}\npenguins_js\n  .view(10)\n```\n\n\n## Comparison 2: Filtering observations\n\nWhen we *filter* tidy data, we keep or exclude rows based on whether or not they satisfy conditions that we specify. We'll use `dplyr::filter()` from the `tidyverse` to do this in R, and `aq.filter()` from `Arquero` to do this in JavaScript. \n\n### Filtering based on a single condition\n\n**Task:** Filter to only include penguins observed on Dream Island. \n\n#### R Tidyverse version (single condition)\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  filter(island == \"Dream\") %>%  # Do the filtering\n  head(10) # Preview top 10 lines of output\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 10 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Dream            39.5          16.7               178        3250\n 2 Adelie  Dream            37.2          18.1               178        3900\n 3 Adelie  Dream            39.5          17.8               188        3300\n 4 Adelie  Dream            40.9          18.9               184        3900\n 5 Adelie  Dream            36.4          17                 195        3325\n 6 Adelie  Dream            39.2          21.1               196        4150\n 7 Adelie  Dream            38.8          20                 190        3950\n 8 Adelie  Dream            42.2          18.5               180        3550\n 9 Adelie  Dream            37.6          19.3               181        3300\n10 Adelie  Dream            39.8          19.1               184        4650\n# … with 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n#### ObservableJS Arquero version (single condition)\n\n```{ojs}\npenguins_js\n  .filter(d => d.island == \"Dream\") // Do the filtering\n  .view(10) // Preview top 10 lines of output\n```\n\n[TODO] **Sidebar:** What is this `d => d.island` syntax? This looked unfamiliar to me, too. I'm still trying to figure out the language to align this with what's going on (compared to R) -- what's the \"one-liner\" version of what's happening in `d => d.island == \"Dream\"` here? Is that akin to needing `.` as the first argument of an R function?  \n\n\n### Filtering based on multiple conditions (intersection)\n\nFilter to only include Chinstrap penguins with a flipper length greater than 200 mm. \n\n#### R Tidyverse version (multiple conditions, intersection)\n\n**Note:** There are a number of ways to write this \"and\" intersection statement to filter by two conditions that must be satisfied. Below, I just use a comma between statements. This could also be an ampersand (`&`), or you could have each condition in its own filter statement!\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  filter(species == \"Chinstrap\", flipper_length_mm > 200) %>% \n  head(10)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 10 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>     <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Chinstrap Dream            52            18.1               201        4050\n 2 Chinstrap Dream            50.5          19.6               201        4050\n 3 Chinstrap Dream            52.8          20                 205        4550\n 4 Chinstrap Dream            54.2          20.8               201        4300\n 5 Chinstrap Dream            51            18.8               203        4100\n 6 Chinstrap Dream            52            20.7               210        4800\n 7 Chinstrap Dream            53.5          19.9               205        4500\n 8 Chinstrap Dream            49            19.5               210        3950\n 9 Chinstrap Dream            50.8          18.5               201        4450\n10 Chinstrap Dream            49            19.6               212        4300\n# … with 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n\n#### ObservableJS Arquero version (multiple conditions, intersection)\n\n```{ojs}\npenguins_js\n  .filter(d => d.species == \"Chinstrap\" && d.flipper_length_mm > 200)\n  .view(10)\n```\n\n\n### Filtering based on multiple conditions (union)\n\n**Task:** Filter the penguins data to keep all observations where the island is \"Biscoe\" OR the year is 2007. \n\n#### R Tidyverse version (multiple conditions, union)\n\nWe write an \"or\" statement within `filter()` using the vertical pipe (`|`) (not to be confused with the pipe operator, `%>%`).\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  filter(island == \"Biscoe\" | year == 2007)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 234 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# … with 224 more rows, and 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n#### ObservableJS Arquero version (multiple conditions, union)\n\n```{ojs}\npenguins_js \n  .filter(d => d.island == \"Biscoe\" | d.year == 2007)\n  .view()\n```\n\n## Comparison 2: Selecting variables\n\nWe can use `dplyr::select()` to select, omit, or rearrange columns (variables, if the data is in tidy format) in R. Using `Arquero` we similarly use `select()`. These ones feel pretty close. \n\n### Select several columns by name\n\n**Task:** Select only the species, island, and flipper length variables. \n\n#### R Tidyverse version (select variables)\n\nUse `dplyr::select()` to select variables.\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  select(species, island, flipper_length_mm) %>% \n  head(5)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 5 × 3\n  species island    flipper_length_mm\n  <chr>   <chr>                 <dbl>\n1 Adelie  Torgersen               181\n2 Adelie  Torgersen               186\n3 Adelie  Torgersen               195\n4 Adelie  Torgersen                NA\n5 Adelie  Torgersen               193\n```\n:::\n:::\n\n#### ObservableJS Arquero version (select variables)\n\nUse Arquero `select()` to select variables. \n\n```{ojs}\npenguins_js\n  .select('species', 'island', 'flipper_length_mm')\n  .view(5)\n```\n\n*Note:* for both, you can also select by position index (column number). Lots of other options for selecting columns exist that are not included here...at least not right now (e.g. selecting sequential columns, selecting columns that contain a specific string pattern, etc.).\n\n## Aggregated calculations by group\n\nA very common task for any data scientist is to aggregate values by group (e.g. levels of a variable - like penguin species), then perform one or more operations on those grouped values. In `dplyr`, that's done using `group_by() %>% summarize()`. Learn more about that powerhouse combination from the [dplyr documentation](https://dplyr.tidyverse.org/reference/summarise.html).\n\nIn JavaScript, use `Arquero`'s `groupby()` and `rollup()` functions to get the same results. Let's compare them! \n\n### A single grouped aggregate calculation \n\n**Task:** Find the mean body mass of penguins, by species. \n\n#### R Tidyverse version \n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_r %>% \n  group_by(species) %>% \n  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   mean_body_mass\n  <chr>              <dbl>\n1 Adelie             3701.\n2 Chinstrap          3733.\n3 Gentoo             5076.\n```\n:::\n:::\n\n#### Arquero JavaScript version\n\n```{ojs}\npenguins_js \n  .filter(d => d.body_mass_g !== \"NA\")\n  .groupby('species')\n  .rollup({body_mass_g: d => op.mean(d.body_mass_g)})\n  .view()\n```\n\n[TODO]: `Arquero` version of `na.rm`?",
    "supporting": [
      "observable-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}