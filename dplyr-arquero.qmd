---
title: "A comparison of data wrangling in dplyr and Arquero"
subtitle: "R to JavaScript translations"
author: "Allison Horst"
date: 2022-04-22
---

## Overview

The goal of this document is to compare some basic wrangling (between `tidyverse` functions (especially in `dplyr`) in R, and `Arquero` in JavaScript) and visualization (between `ggplot2` in R, and `Plot` in JavaScript). I'm still learning about JavaScript and Observable -- this is a living document that will keep growing (and being corrected) as I learn more useful comparisons! 

For those of you R users, don't fear - `Arquero` feels pretty darn familiar to `dplyr` once you get rolling. From the `Arquero` repo: "Arquero is a JavaScript library for query processing and transformation of array-backed data tables. Following the relational algebra and inspired by the design of `dplyr`, Arquero provides a fluent API for manipulating column-oriented data frames. Arquero supports a range of data transformation tasks, including filter, sample, aggregation, window, join, and reshaping operations." 

See all `Arquero` verbs: https://uwdata.github.io/arquero/api/verbs.html

## Attaching / importing libraries:

### Attaching installed R packages: 
```{r}
#| warning: false
#| message: false

library(tidyverse)
library(palmerpenguins)
library(here)
```

### Importing JavaScript library `Arquero`
```{ojs}
import { aq, op } from '@uwdata/arquero'
```

```{r}
#| include: false
#| eval: false
penguins %>% 
  write_csv(here::here("penguins.csv"))
```

## Comparison 1: Read in a file, take a first look! 

### R Tidyverse version: 

In R, we can use `readr::read_csv()` (in the `tidyverse`) to read in a CSV:

```{r}
#| message: false
#| warning: false
penguins_r <- read_csv("penguins.csv")
```

Check out the first 10 rows:

```{r}
penguins_r %>% 
  head(10)
```


### ObservableJS Arquero version: 

We can read in `penguins.csv` using the `.loadCSV()` function from the [Arquero](https://observablehq.com/@uwdata/introducing-arquero) library, which I am quickly learning to love. 

```{ojs}
penguins_js = aq.loadCSV("penguins.csv")
```

Check out the first 10 rows:

```{ojs}
penguins_js
  .view(10)
```


## Comparison 2: Filtering observations

When we *filter* tidy data, we keep or exclude rows based on whether or not they satisfy conditions that we specify. We'll use `dplyr::filter()` from the `tidyverse` to do this in R, and `aq.filter()` from `Arquero` to do this in JavaScript. 

### Filtering based on a single condition

**Task:** Filter to only include penguins observed on Dream Island. 

#### R Tidyverse version (single condition)

```{r}
penguins_r %>% 
  filter(island == "Dream") %>%  # Do the filtering
  head(10) # Preview top 10 lines of output
```

#### ObservableJS Arquero version (single condition)

```{ojs}
penguins_js
  .filter(d => d.island == "Dream") // Do the filtering
  .view(10) // Preview top 10 lines of output
```

TODO **Sidebar:** What is this `d => d.island` syntax? This looked unfamiliar to me, too. I'm still trying to figure out the language to align this with what's going on (compared to R) -- what's the "one-liner" version of what's happening in `d => d.island == "Dream"` here? Is that akin to needing `.` as the first argument of an R function?  


### Filtering based on multiple conditions (intersection)

Filter to only include Chinstrap penguins with a flipper length greater than 200 mm. 

#### R Tidyverse version (multiple conditions, intersection)

**Note:** There are a number of ways to write this "and" intersection statement to filter by two conditions that must be satisfied. Below, I just use a comma between statements. This could also be an ampersand (`&`), or you could have each condition in its own filter statement!

```{r}
penguins_r %>% 
  filter(species == "Chinstrap", flipper_length_mm > 200) %>% 
  head(10)
```


#### ObservableJS Arquero version (multiple conditions, intersection)

```{ojs}
penguins_js
  .filter(d => d.species == "Chinstrap" && d.flipper_length_mm > 200)
  .view(10)
```


### Filtering based on multiple conditions (union)

**Task:** Filter the penguins data to keep all observations where the island is "Biscoe" OR the year is 2007. 

#### R Tidyverse version (multiple conditions, union)

We write an "or" statement within `filter()` using the vertical pipe (`|`) (not to be confused with the pipe operator, `%>%`).

```{r}
penguins_r %>% 
  filter(island == "Biscoe" | year == 2007)
```

#### ObservableJS Arquero version (multiple conditions, union)

```{ojs}
penguins_js 
  .filter(d => d.island == "Biscoe" | d.year == 2007)
  .view()
```

## Comparison 2: Selecting variables

We can use `dplyr::select()` to select, omit, or rearrange columns (variables, if the data is in tidy format) in R. Using `Arquero` we similarly use `select()`. These ones feel pretty close. 

### Select several columns by name

**Task:** Select only the species, island, and flipper length variables. 

#### R Tidyverse version (select variables)

Use `dplyr::select()` to select variables.

```{r}
penguins_r %>% 
  select(species, island, flipper_length_mm) %>% 
  head(5)
```

#### ObservableJS Arquero version (select variables)

Use Arquero `select()` to select variables. 

```{ojs}
penguins_js
  .select('species', 'island', 'flipper_length_mm')
  .view(5)
```

*Note:* for both, you can also select by position index (column number). Lots of other options for selecting columns exist that are not included here...at least not right now (e.g. selecting sequential columns, selecting columns that contain a specific string pattern, etc.).

## Aggregated calculations by group

A very common task for any data scientist is to aggregate values by group (e.g. levels of a variable - like penguin species), then perform one or more operations on those grouped values. In `dplyr`, that's done using `group_by() %>% summarize()`. Learn more about that powerhouse combination from the [dplyr documentation](https://dplyr.tidyverse.org/reference/summarise.html).

In JavaScript, use `Arquero`'s `groupby()` and `rollup()` functions to get the same results. Let's compare them! 

### A single grouped aggregate calculation 

**Task:** Find the mean body mass of penguins, by species. 

#### R Tidyverse version 

```{r}
penguins_r %>% 
  group_by(species) %>% 
  summarize(mean_body_mass = mean(body_mass_g, na.rm = TRUE))
```

#### Arquero JavaScript version

```{ojs}
penguins_js 
  .filter(d => d.body_mass_g !== "NA")
  .groupby('species')
  .rollup({body_mass_g: d => op.mean(d.body_mass_g)})
  .view()
```

TODO: `Arquero` version of `na.rm`?
